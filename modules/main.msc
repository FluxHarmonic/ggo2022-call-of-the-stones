(define-module (stones main)
  (import (mesche array)
          (mesche math)
          (mesche list)
          (mesche time)
          (mesche string)
          (substratic font)
          (substratic input)
          (substratic engine)
          (substratic window)
          (substratic renderer)
          (stones game)
          (stones assets)))

(define screen-width 1280)
(define screen-height 720)
(define screen-scale 1)
(define window-width (* 1280 screen-scale))
(define window-height (* 720 screen-scale))

(define window (window-create window-width
                              window-height
                              "Call of the Stones"))
(define input-state (input-init window))
(define renderer (renderer-create window))

;; Scale everything rendered by the scale factor
(renderer-scale-set! renderer screen-scale)

;; Load fonts
(define small-font (load-font 'small-font "assets/fonts/Thintel.ttf" 35))

;; Show the window
(window-show window)

;; Get an fps counter
(define current-fps (make-fps-counter))

;; Initialize the game
(init-game)

;; These will track the current game logic and render functions
(define current-input-handler handle-game-input-event)
(define current-updater update-game)
(define current-renderer render-game)

(define (handle-input-events)
  (let next-event ((input-event (input-event-take input-state)))
    (if input-event
        (begin
          (if current-input-handler
              (current-input-handler input-event))
          (next-event (input-event-take input-state))))))

(define (main-updater time-delta)
  (if (not (window-needs-close? window))
      (begin
        (handle-input-events)
        (current-updater time-delta))))

(define (main-renderer renderer)
  ;; Clear the screen
  (renderer-clear renderer 0 0 0)
  (current-renderer renderer window-width window-height)

  (let ((fps (current-fps)))
    (if fps
        (render-text renderer
                     small-font
                     (string-append "FPS: " (number->string fps 3))
                     (- screen-width 105)
                     25))))

;; This will run the game functions until the updater returns nil
(run-engine-loop :renderer renderer
                 :update-func main-updater
                 :render-func main-renderer)
