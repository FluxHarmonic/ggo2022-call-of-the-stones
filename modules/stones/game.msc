(define-module (stones game)
  (import (mesche fs)
          (mesche math)
          (mesche string)
          (substratic font)
          (substratic input)
          (substratic renderer)
          (stones ui)
          (stones input)
          (stones assets)
          (stones player)
          (stones screen)))

;; Game states:
;; - running
;; - editing

(define state 'running)

(define small-font #f)
(define result-font #f)

(define result-text "You recovered the stones!")
(define result-text-width #f)

(define controller (create-controller))

;; Position would be cardinal points with diagonals,
;; NW, N, NE, E, SE, S, SW, W
(define listen-vector #f)
(define listen-icon-size 50)
(define listen-icon-color (rgb 0 0 255))

(define player #f)
(define screens '())
(define current-screen #f)
(define screen-stone-pos #f)
(define last-save-point #f)

(define is-altar-screen #f)
(define altar-position (cons 19 13))

(define mouse-x 0)
(define mouse-y 0)
(define root-element #f)
(define ui-context #f)
(define current-tile-index 1)

;; Tracks whether left mouse button is held down in edit mode
(define paint-button-down #f)

(define screen-scale 1)

(define held-stones '())
(define stone-locations
  '(("peace" (6 . 0) (34 . 6))
    ;; ("cave" (0 . 2))
    ;; ("tech" (8 . 3))
    ;; ("lava" (5 . 5))
    ))

(define (init-game screen-width screen-height scale) :export
  ;; Hold on to the screen size and scale
  (set! ui-context (make-ui-context :pos-x 0
                                    :pos-y 0
                                    :max-x screen-width
                                    :max-y screen-height))
  (set! screen-scale scale)

  ;; Load assets
  (set! small-font (load-font 'small-font "assets/fonts/Thintel.ttf" 35))
  (set! result-font (load-font 'result-font
                               "assets/fonts/Thintel.ttf"
                               130))

  ;; Calculate string sizes
  (set! result-text-width (font-text-width result-font result-text))

  ;; TODO: Load the last save point data
  (set! last-save-point (cons "peace-4-0" altar-position))

  ;; Load the starting point of the game
  (set-current-screen! "peace-4-0")

  ;; Create the UI
  (set! root-element (create-root-element
                      (create-button "test-button"
                                     "Click me!"
                                     300 300 80
                                     (lambda (ui-element)
                                       (display "I was clicked!\n")))))

  ;; Create and initialize the player
  (let ((start-pos (cdr last-save-point)))
    (set! player (create-player controller))
    (player-x-set! player (* (car start-pos) tile-size))
    (player-y-set! player (* (cdr start-pos) tile-size))))

(define (screen->world screen-x screen-y)
  (cons (floor (/ screen-x tile-size))
        (floor (/ screen-y tile-size))))

(define (calculate-distance point-a point-b)
  (sqrt (+ (expt (- (car point-b) (car point-a)) 2)
           (expt (- (cdr point-b) (cdr point-a)) 2))))

(define (find-nearest-stone screen)
  (let loop ((world-pos (cons (screen-world-x screen)
                              (screen-world-y screen)))
             (nearest #f)
             (locations stone-locations))
    (if (pair? locations)
        (let ((location (cadr (car locations))))
          (loop world-pos
                (if nearest
                    (if (< (calculate-distance world-pos nearest)
                           (calculate-distance world-pos location))
                        nearest
                        location)
                    location)
                (cdr locations)))
        nearest)))

(define (calculate-listen-vector screen stone-location)
  (cons (if (< (screen-world-x screen)
               (car stone-location))
            1
            (if (> (screen-world-x screen)
                   (car stone-location))
                0))
        (if (< (screen-world-y screen)
               (cdr stone-location))
            1
            (if (> (screen-world-y screen)
                   (cdr stone-location))
                0))))

(define (translate-input-event input-event mouse-x mouse-y)
  (if (input-event-mouse-button-down? input-event)
      (make-ui-mouse-event :x mouse-x
                           :y mouse-y
                           :kind 'down
                           :button (input-event-mouse-button input-event))
      (if (input-event-mouse-button-up? input-event)
          (make-ui-mouse-event :x mouse-x
                               :y mouse-y
                               :kind 'up
                               :button (input-event-mouse-button input-event))
          (if (input-event-mouse-move? input-event)
              (make-ui-mouse-event :x mouse-x
                                   :y mouse-y
                                   :kind 'move)))))

(define (apply-input-handlers input-event handlers)
  (if (pair? handlers)
      (if (not ((car handlers) input-event))
          (apply-input-handlers input-event
                                (cdr handlers)))))

(define (set-current-screen! screen-name)
  ;; TODO: Check if current screen has the stone
  (set! current-screen (load-screen screen-name))

  ;; Is this the altar screen
  (set! is-altar-screen
        (equal? screen-name "peace-4-0"))

  ;; Is a stone on this screen?
  (set! screen-stone-pos #f)
  (let loop ((locations stone-locations))
    (if (pair? locations)
        (if (and (equal? (car (car locations))
                         (screen-area current-screen))
                 (equal? (car (cadr (car locations)))
                         (screen-world-x current-screen))
                 (equal? (cdr (cadr (car locations)))
                         (screen-world-y current-screen)))
            (set! screen-stone-pos (car (cdr (cdr (car locations)))))
            (loop (cdr locations))))))

(define (reload-current-screen)
  (set-current-screen! (screen-name current-screen)))

(define (move-to-screen screen move-x move-y)
  (let ((target-screen (string-append (screen-area screen)
                                      "-"
                                      (number->string (+ (screen-world-x screen)
                                                         move-x))
                                      "-"
                                      (number->string (+ (screen-world-y screen)
                                                         move-y)))))
    (if (path-exists? (screen-name->path target-screen))
        (set-current-screen! target-screen)
        (begin
          (display "Screen does not exist: ")
          (display target-screen)
          (display "\n")))))

(define editor-key-bindings
  (list (cons input-key-code-s (lambda ()
                                 (save-screen current-screen)))
        (cons input-key-code-r reload-current-screen)
        (cons input-key-code-h (lambda ()
                                 (move-to-screen current-screen -1 0)))
        (cons input-key-code-j (lambda ()
                                 (move-to-screen current-screen 0 1)))
        (cons input-key-code-k (lambda ()
                                 (move-to-screen current-screen 0 -1)))
        (cons input-key-code-l (lambda ()
                                 (move-to-screen current-screen 1 0)))))

(define (editor-key-handler input-event)
  (if (and (equal? state 'editing)
           (input-event-key-down? input-event)
           (input-event-modifier-ctrl? input-event))
      (let ((binding (assq (input-event-key-code input-event)
                           editor-key-bindings)))
        (if binding
            ;; Execute the associated handler function
            (begin ((cdr binding)) #t)))))

(define (editor-tile-select-handler input-event)
  (let ((key (input-event-key-code input-event)))
    (if (and (>= key input-key-code-0)
             (<= key input-key-code-9))
        (begin
          (set! current-tile-index (- key input-key-code-0))
          #t))))

(define (editor-mouse-handler input-event)
  (let ((button (input-event-mouse-button input-event))
        (map-pos (screen->world mouse-x mouse-y)))
    ;; Should we paint the tile?
    ;; TODO: Move this somewhere else!
    (if paint-button-down
        (screen-tile-set! current-screen
                          (car map-pos)
                          (cdr map-pos)
                          current-tile-index))

    ;; Did the player click the mouse in edit mode?
    (if (input-event-mouse-button-down? input-event)
        (if (equal? button input-mouse-button-left)
            (begin (set! paint-button-down #t) #t)
            (if (equal? button input-mouse-button-right)
                ;; Set the player position on right mouse click
                (begin
                  (player-x-set! player (* (car map-pos) tile-size))
                  (player-y-set! player (* (cdr map-pos) tile-size))
                  #t)))
        (if (and (input-event-mouse-button-up? input-event)
                 (equal? button input-mouse-button-left))
            (begin (set! paint-button-down #f) #t)))))

(define editor-input-handlers
  (list editor-key-handler
        editor-tile-select-handler
        editor-mouse-handler))

(define (handle-game-input-event input-event) :export
  ;; Track current mouse position
  (if (input-event-mouse-move? input-event)
      (begin
        (set! mouse-x (/ (input-event-mouse-x input-event) screen-scale))
        (set! mouse-y (/ (input-event-mouse-y input-event) screen-scale))))

  ;; Are we toggling edit mode?
  (if (and (input-event-key-down? input-event)
           (equal? (input-event-key-code input-event)
                   input-key-code-tab))
      (begin
        (set! state (if (equal? state 'running)
                        'editing
                        'running))
        (if (equal? state 'running)
            (set! paint-button-down #f))
        (display (string-append "Mode toggled to '"
                                (symbol->string state)
                                "'\n"))))

  ;; If not editing, handle player input
  (if (equal? state 'running)
      (handle-player-input player input-event)
      (apply-input-handlers input-event
                            editor-input-handlers)))

(define (game-handle-touched-altar)
  (if (pair? held-stones)
      (begin
        (set! held-stones '())
        (if (null? stone-locations)
            (begin
              (set! state 'win)
              (display "You win!\n"))))))

(define (game-handle-touched-stone)
  ;; Clear the stone position from the screen
  (set! screen-stone-pos #f)

  ;; Add the stone to held stones
  (set! held-stones
        (cons (screen-area current-screen)
              held-stones))

  (display "Held stones updated: ")
  (display held-stones)
  (display "\n")

  ;; Remove the stone from the list
  (set! stone-locations
        (delp (lambda (loc)
                (equal? (car loc)
                        (screen-area current-screen)))
              stone-locations))

  (display "Stone locations updated:")
  (display stone-locations)
  (display "\n"))

(define (game-handle-change-screen portal)
  (let ((screen #f))
    ;; Load the next screen
    (set! screen (load-screen (portal-dest-screen portal)))

    ;; Find the destination portal by name
    (let ((dest-portal (memp (lambda (p)
                               (equal? (portal-name p)
                                       (portal-dest-portal portal)))
                             (screen-portals screen))))
      (if dest-portal
          (begin
            (set-current-screen! (portal-dest-screen portal))
            (player-x-set! player (* (portal-x (car dest-portal)) tile-size))
            (player-y-set! player (* (portal-y (car dest-portal)) tile-size)))
          (begin
            (display "Did not find portal: ")
            (display (portal-dest-portal portal))
            (display "\n"))))))

(define (game-event-handler event)
  (if (equal? (car event) 'change-screen)
      (game-handle-change-screen (cdr event))
      (if (equal? (car event) 'touched-stone)
          (game-handle-touched-stone)
          (if (equal? (car event) 'touched-altar)
              (game-handle-touched-altar)))))

(define (update-game time-delta) :export
  (if (eqv? state 'quit)
      ;; If we're in the quit state, exit the loop by returning nil
      #f
      (if (not (eqv? state 'win))
          (begin
            ;; Check if the player is listening for stone locations
            (if (controller-listen controller)
                (if (not listen-vector)
                    (set! listen-vector
                          (calculate-listen-vector current-screen
                                                   (find-nearest-stone current-screen))))
                (set! listen-vector #f))

            ;; (update-element ui-context root-element time-delta)
            (update-player player
                           current-screen
                           (or (and is-altar-screen
                                    (cons 'touched-altar altar-position))
                               (and screen-stone-pos
                                    (cons 'touched-stone screen-stone-pos)))
                           game-event-handler
                           time-delta)
            #t)
          #t)))

(define (render-text-centered renderer
                              font
                              text
                              x y
                              text-width text-height)
  (render-text renderer
               font
               text
               (- x (/ text-width 2))
               (- y (/ text-height 2))))

(define (render-stone renderer)
  (renderer-draw-rect renderer
                      (* (car screen-stone-pos)
                         32)
                      (* (cdr screen-stone-pos)
                         32)
                      32 32
                      listen-icon-color))

(define (render-debug-text renderer window-width window-height)
  (render-text renderer
               small-font
               (string-append "MX: "
                              (number->string (floor (/ mouse-x tile-size)))
                              " / MY: "
                              (number->string (floor (/ mouse-y tile-size))))
               10 30)

  (render-text renderer
               small-font
               (string-append "State: " (symbol->string state))
               10 50)

  (render-text renderer
               small-font
               (string-append "Screen: " (screen-name current-screen))
               10 70)

  (render-text renderer
               small-font
               (string-append "Tile: " (number->string current-tile-index))
               10 90))

(define (render-game renderer window-width window-height) :export
  (render-screen renderer current-screen window-width window-height)
  (render-player renderer player window-width window-height)
  (if screen-stone-pos (render-stone renderer))

  (render-debug-text renderer window-width window-height)

  (if (eqv? state 'win)
      (render-text-centered renderer
                        result-font
                        result-text
                        (/ window-width 2)
                        (/ window-height 2)
                        result-text-width
                        50))

  (if listen-vector
      (renderer-draw-rect renderer
                          (+ (* (or (car listen-vector)
                                    0.5)
                                (- window-width 125))
                             25)
                          (+ (* (or (cdr listen-vector)
                                    0.5)
                                (- window-height 125))
                             25)
                          listen-icon-size
                          listen-icon-size
                          listen-icon-color))

  ;; Render the UI
  ;; (render-element ui-context root-element renderer)
  )
