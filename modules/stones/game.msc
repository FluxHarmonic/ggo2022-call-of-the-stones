(define-module (stones game)
  (import (mesche math)
          (mesche string)
          (substratic font)
          (substratic input)
          (substratic renderer)
          (stones ui)
          (stones assets)
          (stones player)
          (stones screen)))

;; Game states:
;; - running
;; - editing

(define state 'running)

(define small-font #f)
(define result-font #f)

(define mouse-x 0)
(define mouse-y 0)

(define player #f)
(define screens '())
(define current-screen #f)
(define last-save-point #f)
(define root-element #f)
(define ui-context #f)
(define current-tile-index 1)

;; Tracks whether left mouse button is held down in edit mode
(define paint-button-down #f)

(define screen-scale 1)

(define stone-locations
  '(("peace-5-1" (3 3))
    ("cave-1-1" (3 3))
    ("tech-2-3" (3 3))
    ("lava-3-1" (3 3))))

(define (screen-by-name screens name)
  (cdr (assq name screens)))

(define (init-game screen-width screen-height scale) :export
  ;; Hold on to the screen size and scale
  (set! ui-context (make-ui-context :pos-x 0
                                    :pos-y 0
                                    :max-x screen-width
                                    :max-y screen-height))
  (set! screen-scale scale)

  ;; Load assets
  (set! small-font (load-font 'small-font "assets/fonts/Thintel.ttf" 35))
  (set! result-font (load-font 'result-font
                               "assets/fonts/Thintel.ttf"
                               150))

  ;; TODO: Load the last save point data
  (set! last-save-point (cons "start" (cons 19 17)))

  ;; Load the starting point of the game
  (set! current-screen (load-screen "assets/screens/peace-3-1.stm"))

  ;; Create the UI
  (set! root-element (create-root-element
                      (create-button "test-button"
                                     "Click me!"
                                     300 300 80
                                     (lambda (ui-element)
                                       (display "I was clicked!\n")))))

  ;; Create and initialize the player
  (let ((start-pos (cdr last-save-point)))
    (set! player (create-player))
    (player-x-set! player (* (car start-pos) tile-size))
    (player-y-set! player (* (cdr start-pos) tile-size))))

(define (screen->world screen-x screen-y)
  (cons (floor (/ screen-x tile-size))
        (floor (/ screen-y tile-size))))

(define (translate-input-event input-event mouse-x mouse-y)
  (if (input-event-mouse-button-down? input-event)
      (make-ui-mouse-event :x mouse-x
                           :y mouse-y
                           :kind 'down
                           :button (input-event-mouse-button input-event))
      (if (input-event-mouse-button-up? input-event)
          (make-ui-mouse-event :x mouse-x
                               :y mouse-y
                               :kind 'up
                               :button (input-event-mouse-button input-event))
          (if (input-event-mouse-move? input-event)
              (make-ui-mouse-event :x mouse-x
                                   :y mouse-y
                                   :kind 'move)))))

(define (apply-input-handlers input-event handlers)
  (if (pair? handlers)
      (if (not ((car handlers) input-event))
          (apply-input-handlers input-event
                                (cdr handlers)))))

(define (editor-key-handler input-event)
  (if (and (equal? state 'editing)
           (input-event-key-down? input-event)
           ;; (input-event-modifier-ctrl? input-event)
           (equal? (input-event-key-code input-event)
                   input-key-code-s))
      (begin
        (save-screen current-screen
                     (string-append "assets/screens/"
                                    (screen-name current-screen)
                                    ".stm"))
        #t)))

(define (editor-tile-select-handler input-event)
  (let ((key (input-event-key-code input-event)))
    (if (and (>= key input-key-code-0)
             (<= key input-key-code-9))
        (begin
          (set! current-tile-index (- key input-key-code-0))
          #t))))

(define (editor-mouse-handler input-event)
  (let ((button (input-event-mouse-button input-event))
        (map-pos (screen->world mouse-x mouse-y)))
    ;; Should we paint the tile?
    ;; TODO: Move this somewhere else!
    (if paint-button-down
        (screen-tile-set! current-screen
                          (car map-pos)
                          (cdr map-pos)
                          current-tile-index))

    ;; Did the player click the mouse in edit mode?
    (if (input-event-mouse-button-down? input-event)
        (if (equal? button input-mouse-button-left)
            (begin (set! paint-button-down #t) #t)
            (if (equal? button input-mouse-button-right)
                ;; Set the player position on right mouse click
                (begin
                  (player-x-set! player (* (car map-pos) tile-size))
                  (player-y-set! player (* (cdr map-pos) tile-size))
                  #t)))
        (if (and (input-event-mouse-button-up? input-event)
                 (equal? button input-mouse-button-left))
            (begin (set! paint-button-down #f) #t)))))

(define editor-input-handlers
  (list editor-key-handler
        editor-tile-select-handler
        editor-mouse-handler))

(define (handle-game-input-event input-event) :export
  ;; Track current mouse position
  (if (input-event-mouse-move? input-event)
      (begin
        (set! mouse-x (/ (input-event-mouse-x input-event) screen-scale))
        (set! mouse-y (/ (input-event-mouse-y input-event) screen-scale))))

  ;; Are we toggling edit mode?
  (if (and (input-event-key-down? input-event)
           (equal? (input-event-key-code input-event)
                   input-key-code-tab))
      (begin
        (set! state (if (equal? state 'running)
                        'editing
                        'running))
        (if (equal? state 'running)
            (set! paint-button-down #f))
        (display (string-append "Mode toggled to '"
                                (symbol->string state)
                                "'\n"))))

  ;; If not editing, handle player input
  (if (equal? state 'running)
      (handle-player-input player input-event)
      (apply-input-handlers input-event
                            editor-input-handlers)))

(define (game-event-handler event)
  (if (equal? (car event) 'change-screen)
      (let ((portal (cdr event))
            (screen #f))
        ;; Load the next screen
        (set! screen (load-screen (string-append "assets/screens/"
                                                 (portal-dest-screen portal)
                                                 ".stm")))

        ;; Find the destination portal by name
        (let ((dest-portal (memp (lambda (p)
                                   (equal? (portal-name p)
                                           (portal-dest-portal portal)))
                                 (screen-portals screen))))
          (if dest-portal
              (begin
                (set! current-screen screen)
                (player-x-set! player (* (portal-x (car dest-portal)) tile-size))
                (player-y-set! player (* (portal-y (car dest-portal)) tile-size)))
              (begin
                (display "Did not find portal: ")
                (display (portal-dest-portal portal))
                (display "\n")))))))

(define (update-game time-delta) :export
  (if (eqv? state 'quit)
      ;; If we're in the quit state, exit the loop by returning nil
      #f
      (begin
        ;; Continue running the game loop
        ;; (update-element ui-context root-element time-delta)
        (update-player player current-screen game-event-handler time-delta)
        #t)))

(define (render-text-centered renderer
                              font
                              text
                              x y
                              text-width text-height)
  (render-text renderer
               font
               text
               (- x (/ text-width 2))
               (- y (/ text-height 2))))

(define (render-game renderer window-width window-height) :export
  (render-screen renderer current-screen window-width window-height)
  (render-player renderer player window-width window-height)

  (render-text renderer
               small-font
               (string-append "MX: "
                              (number->string (floor (/ mouse-x tile-size)))
                              " / MY: "
                              (number->string (floor (/ mouse-y tile-size))))
               10 30)

  (render-text renderer
               small-font
               (string-append "State: " (symbol->string state))
               10 50)

  (render-text renderer
               small-font
               (string-append "Screen: " (screen-name current-screen))
               10 70)

  (render-text renderer
               small-font
               (string-append "Tile: " (number->string current-tile-index))
               10 90)

  ;; Render the UI
  ;; (render-element ui-context root-element renderer)
  )
