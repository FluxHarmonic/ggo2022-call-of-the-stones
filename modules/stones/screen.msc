(define-module (stones screen)
  (import (mesche io)
          (mesche math)
          (mesche array)
          (mesche string)
          (stones assets)
          (substratic texture)
          (substratic renderer)))

(define portal-direction-left  0 :export)
(define portal-direction-right 1 :export)
(define portal-direction-up    2 :export)
(define portal-direction-down  3 :export)

(define tile-texture #f)

(define-record-type portal
  (fields name
          x y
          direction
          dest-screen
          dest-portal))

(define-record-type screen
  (fields name                          ; The name of the screen
          width                         ; The width of the screen
          height                        ; The height of the screen
          bg-image                 ; A background image to displ
          bg-color                 ; A background color to display when no image
          tiles                    ; The vector containing tile data
          tile-image               ; The image to use for rendering tiles
          portals                  ; The list of portals in the screen
          save-point))             ; The save point in the screen, if any

;; Where does the player start on the screen?
;; - It depends on whether we are just starting the game
;;   or if they walked in from a particular entry point
;; - We need to know what the entry points are
;; - Have a list of numbered portals per screen
;; - Each portal has a destination which is a screen plus portal number
;; - The screen would also have possible save points which would function as a
;;   starting location either when starting the game or after you die

;; The actual play screen is 1280x720 (720p)
;; The tiles are 32x32
;; The map size is 40x23 (because the resolution isn't perfectly square)

(define tile-size 32 :export)
(define map-width 40)
(define map-height 23)

(define sky-color (rgb 171 201 231))
(define ground-color (rgb 237 144 37))

(define (screen-tile-set! screen x y tile-index) :export
  (let ((tiles (screen-tiles screen)))
    (array-nth-set! tiles (+ x (* y map-width)) tile-index)))

(define (screen-tile-ref screen x y) :export
  (if (and (>= x 0)
           (< x map-width)
           (>= y 0)
           (< y map-height))
      (array-nth (screen-tiles screen)
                 (+ x (* y map-width)))
      #f))

(define (screen-portal-at-pos screen x y direction) :export
  (let loop ((portals (screen-portals screen)))
    (if (pair? portals)
        (if (and (equal? (portal-x (car portals)) x)
                 (equal? (portal-y (car portals)) y)
                 (or (not direction)
                     (equal? direction
                             (portal-direction (car portals)))))
            (car portals)
            (loop (cdr portals)))
        #f)))

(define (screen-tile-ground? screen x y) :export
  (equal? (screen-tile-ref screen x y) 1))

(define (screen-tile-wall? screen x y) :export
  (equal? (screen-tile-ref screen x y) 1))

(define (fill-screen screen ground-y)
  (let loop ((pos 0)
             (max (* map-width map-height)))
    (if (< pos max)
        (let ((x (% pos map-width))
              (y (floor (/ pos map-width))))
          (screen-tile-set! screen
                            x y
                            (if (>= y ground-y) 1 0))
          (loop (+ pos 1)
                max)))))

(define (create-screen name) :export
  (make-screen :name name
               :bg-color sky-color
               :tiles (make-array (* map-width map-height))
               :portals '()))

(define (write-portals portals port)
  (let loop ((count 0)
             (portals portals)
             (out-string ""))
    (if (pair? portals)
        (loop (+ count 1)
              (cdr portals)
              (string-append out-string
                             (portal-name (car portals)) "\n"
                             (number->string (portal-x (car portals))) "\n"
                             (number->string (portal-y (car portals))) "\n"
                             (number->string (portal-direction (car portals))) "\n"
                             (portal-dest-screen (car portals)) "\n"
                             (portal-dest-portal (car portals)) "\n"))
        (begin
          (write-string (string-append (number->string count) "\n") port)
          (if (> count 0)
              (write-string out-string port))))))

(define (read-portals port)
  (let loop ((count (string->number (read-line port)))
             (portals '()))
    (if (> count 0)
        (loop (- count 1)
              (cons (make-portal :name (read-line port)
                                 :x (string->number (read-line port))
                                 :y (string->number (read-line port))
                                 :direction (string->number (read-line port))
                                 :dest-screen (read-line port)
                                 :dest-portal (read-line port))
                    portals))
        (reverse portals))))

(define (save-screen screen file-path) :export
  (display "Writing screen file: ")
  (display file-path)
  (display "\n")
  (let ((port (open-output-file file-path)))
    (write-string "stcm\n" port)
    (write-string (string-append (screen-name screen) "\n") port)
    (write-string (string-append (number->string map-width) "\n") port)
    (write-string (string-append (number->string map-height) "\n") port)
    (write-string (string-append (number->string (color-r (screen-bg-color screen))) " "
                                 (number->string (color-g (screen-bg-color screen))) " "
                                 (number->string (color-b (screen-bg-color screen))) "\n")
                  port)
    (write-string (string-append (string-join (map (lambda (tile)
                                                     (number->string tile))
                                                   (array->list (screen-tiles screen))) " ")
                                 "\n")
                  port)

    ;; Write out portals list
    (write-portals (screen-portals screen) port)
    (close-output-port port)))

(define (read-color port)
  (let ((channels (string-split (read-line port)
                                (lambda (c)
                                  (string=? c " ")))))
    (rgb (string->number (car channels))
         (string->number (cadr channels))
         (string->number (cadr (cdr channels))))))

(define (read-tiles port)
  (let ((tiles (string-split (read-line port)
                             (lambda (c)
                               (string=? c " ")))))
    (let loop ((tiles tiles)
               (count 0)
               (array (make-array)))
      (if (pair? tiles)
          (begin
            (array-push array (string->number (car tiles)))
            (loop (cdr tiles)
                  (+ count 1)
                  array))
          array))))

(define (load-screen file-path) :export
  (display "Reading screen file: ")
  (display file-path)
  (display "\n")

  ;; Ensure that the tile texture is loaded
  (if (not tile-texture)
      (set! tile-texture (texture-load "assets/tiles/tiles.png") ;; (load-texture 'tiles "assets/tiles/tiles.png")
            ))

  ;; Load the screen file
  (let ((port (open-input-file file-path))
        (screen #f))
    (if (equal? (read-line port)
                "stcm")
        (set! screen
              (make-screen :name (read-line port)
                           :width (string->number (read-line port))
                           :height (string->number (read-line port))
                           :bg-color (read-color port)
                           :tiles (read-tiles port)
                           :portals (read-portals port)))
        (set! screen #f))
    (close-input-port port)
    screen))

(define (tile-index->texture-coords index)
  (cons (* (% index 10) tile-size)
        (* (floor (/ index 10)) tile-size)))

(define (render-screen renderer screen window-width window-height) :export
  ;; Render the background color
  (renderer-draw-rect renderer
                      0 0
                      window-width
                      window-height
                      (screen-bg-color screen))

  ;; Render the tiles
  (let loop ((pos 0)
             (max (* map-width map-height)))
    (if (< pos max)
        (let ((x (% pos map-width))
              (y (floor (/ pos map-width))))
          (let ((index (screen-tile-ref screen x y))
                (texture-coords #f))
            (set! texture-coords (tile-index->texture-coords (- index 1)))
            (if (> index 0)
                ;; (renderer-draw-texture-region renderer
                ;;                               tile-texture
                ;;                               (* x tile-size)
                ;;                               (* y tile-size)
                ;;                               tile-size
                ;;                               tile-size
                ;;                               (car texture-coords)
                ;;                               (cdr texture-coords))
                (renderer-draw-rect renderer
                                    (* x tile-size)
                                    (* y tile-size)
                                    tile-size
                                    tile-size
                                    ground-color)))
          (loop (+ pos 1)
                max)))))
